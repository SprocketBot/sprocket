version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:3.10-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  core:
    build:
      context: .
      dockerfile: dev.Dockerfile
      args:
        SERVICE_PATH: core
    ports:
      - "3001:3001"
    env_file: .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy

  image-generation-service:
    build:
      context: .
      dockerfile: dev.Dockerfile
      args:
        SERVICE_PATH: microservices/image-generation-service
    env_file: .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy

  matchmaking-service:
    build:
      context: .
      dockerfile: dev.Dockerfile
      args:
        SERVICE_PATH: microservices/matchmaking-service
    env_file: .env
    depends_on:
      core:
        condition: service_started

  notification-service:
    build:
      context: .
      dockerfile: dev.Dockerfile
      args:
        SERVICE_PATH: microservices/notification-service
    env_file: .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

  replay-parse-service:
    build:
      context: microservices/replay-parse-service
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy

  server-analytics-service:
    build:
      context: .
      dockerfile: dev.Dockerfile
      args:
        SERVICE_PATH: microservices/server-analytics-service
    env_file: .env
    depends_on:
      rabbitmq:
        condition: service_healthy

  discord-bot:
    build:
      context: .
      dockerfile: dev.Dockerfile
      args:
        SERVICE_PATH: clients/discord-bot
    env_file: .env
    depends_on:
      core:
        condition: service_started

  web:
    build:
      context: .
      dockerfile: dev.Dockerfile
      args:
        SERVICE_PATH: clients/web
    ports:
      - "8080:3000"
    env_file: .env
    depends_on:
      core:
        condition: service_started

  image-generation-frontend:
    build:
      context: .
      dockerfile: dev.Dockerfile
      args:
        SERVICE_PATH: clients/image-generation-frontend
    ports:
      - "8081:3000"
    env_file: .env
    depends_on:
      core:
        condition: service_started

volumes:
  minio_data:
